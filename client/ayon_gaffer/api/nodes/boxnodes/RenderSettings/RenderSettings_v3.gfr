import Gaffer
import GafferArnold
import GafferScene
import IECore
import imath
import ayon_gaffer.api.nodes.render_settings

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 7, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["RenderSettings"] = ayon_gaffer.api.nodes.render_settings.RenderSettingsNode( "RenderSettings" )
parent.addChild( __children["RenderSettings"] )
__children["RenderSettings"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( GafferScene.StandardOptions( "StandardOptions" ) )
__children["RenderSettings"]["StandardOptions"]["user"].addChild( Gaffer.FloatPlug( "Resolution", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["StandardOptions"]["user"].addChild( Gaffer.BoolPlug( "useMotionBlur", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["StandardOptions"]["user"].addChild( Gaffer.BoolPlug( "instantaneous_shutter", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["StandardOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["RenderSettings"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["RenderSettings"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["RenderSettings"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["RenderSettings"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( GafferArnold.ArnoldOptions( "ArnoldOptions" ) )
__children["RenderSettings"]["ArnoldOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "render:cropWindow", Gaffer.Box2fPlug( "value", defaultValue = imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 1, 1 ) ), minValue = imath.V2f( 0, 0 ), maxValue = imath.V2f( 1, 1 ), ), False, "options_renderCropWindow", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "render:pixelAspectRatio", Gaffer.FloatPlug( "value", defaultValue = 1.0, ), False, "pixelAspectRatio", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "render:camera", Gaffer.StringPlug( "value", defaultValue = '/camera_grp/camera', ), True, "renderCamera", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( GafferScene.StandardAttributes( "StandardAttributes" ) )
__children["RenderSettings"]["StandardAttributes"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "render:depthOfField", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "depthOfField", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "render:overscan", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "options_overscan", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "render:overscanTop", Gaffer.FloatPlug( "value", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, ), False, "options_overscanTop", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "render:overscanBottom", Gaffer.FloatPlug( "value", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, ), False, "options_overscanBottom", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "render:overscanLeft", Gaffer.FloatPlug( "value", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, ), False, "options_overscanLeft", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "render:overscanRight", Gaffer.FloatPlug( "value", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, ), False, "options_overscanRight", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( GafferArnold.ArnoldColorManager( "ColorManagerOcio" ) )

__children["RenderSettings"]["ColorManagerOcio"].loadColorManager( "color_manager_ocio" )
__children["RenderSettings"]["ColorManagerOcio"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.StringPlug( "parameters_config", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:AA_seed", Gaffer.IntPlug( "value", defaultValue = 1, ), False, "aaSeed", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:enable_adaptive_sampling", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "enableAdaptiveSampling", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:AA_samples_max", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "aaSamplesMax", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:AA_adaptive_threshold", Gaffer.FloatPlug( "value", defaultValue = 0.05000000074505806, ), False, "aaAdaptiveThreshold", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:enable_progressive_render", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "enableProgressiveRender", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:progressive_min_AA_samples", Gaffer.IntPlug( "value", defaultValue = -4, minValue = -10, maxValue = 0, ), False, "progressiveMinAASamples", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:AA_sample_clamp", Gaffer.FloatPlug( "value", defaultValue = 10.0, ), False, "aaSampleClamp", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:AA_sample_clamp_affects_aovs", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "aaSampleClampAffectsAOVs", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:indirect_sample_clamp", Gaffer.FloatPlug( "value", defaultValue = 10.0, ), False, "indirectSampleClamp", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:low_light_threshold", Gaffer.FloatPlug( "value", defaultValue = 0.0010000000474974513, ), False, "lowLightThreshold", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:GI_total_depth", Gaffer.IntPlug( "value", defaultValue = 10, ), False, "giTotalDepth", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:GI_diffuse_depth", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giDiffuseDepth", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:GI_specular_depth", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giSpecularDepth", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:GI_transmission_depth", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giTransmissionDepth", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:GI_volume_depth", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "giVolumeDepth", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:auto_transparency_depth", Gaffer.IntPlug( "value", defaultValue = 10, ), False, "autoTransparencyDepth", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:texture_max_memory_MB", Gaffer.FloatPlug( "value", defaultValue = 2048.0, ), False, "textureMaxMemoryMB", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:texture_per_file_stats", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "texturePerFileStats", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:texture_max_sharpen", Gaffer.FloatPlug( "value", defaultValue = 1.5, ), False, "textureMaxSharpen", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:max_subdivisions", Gaffer.IntPlug( "value", defaultValue = 999, ), False, "maxSubdivisions", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:subdiv_dicing_camera", Gaffer.StringPlug( "value", defaultValue = '', ), False, "subdivDicingCamera", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:subdiv_frustum_culling", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "subdivFrustumCulling", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:subdiv_frustum_padding", Gaffer.FloatPlug( "value", defaultValue = 0.0, ), False, "subdivFrustumPadding", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:render_device", Gaffer.StringPlug( "value", defaultValue = 'CPU', ), False, "renderDevice", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:gpu_max_texture_resolution", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "gpuMaxTextureResolution", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:bucket_size", Gaffer.IntPlug( "value", defaultValue = 64, ), False, "bucketSize", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:bucket_scanning", Gaffer.StringPlug( "value", defaultValue = 'spiral', ), False, "bucketScanning", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:parallel_node_init", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "parallelNodeInit", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:threads", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "threads", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:texture_searchpath", Gaffer.StringPlug( "value", defaultValue = '', ), False, "textureSearchPath", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:procedural_searchpath", Gaffer.StringPlug( "value", defaultValue = '', ), False, "proceduralSearchPath", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:plugin_searchpath", Gaffer.StringPlug( "value", defaultValue = '', ), False, "pluginSearchPath", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:abort_on_license_fail", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "abortOnLicenseFail", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:skip_license_check", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "skipLicenseCheck", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:filename", Gaffer.StringPlug( "value", defaultValue = '', ), False, "logFileName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:max_warnings", Gaffer.IntPlug( "value", defaultValue = 100, ), False, "logMaxWarnings", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:statisticsFileName", Gaffer.StringPlug( "value", defaultValue = '', ), False, "statisticsFileName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:profileFileName", Gaffer.StringPlug( "value", defaultValue = '', ), False, "profileFileName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:abort_on_error", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "abortOnError", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:error_color_bad_texture", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 0, 0 ), ), False, "errorColorBadTexture", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:error_color_bad_pixel", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 0, 0, 1 ), ), False, "errorColorBadPixel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:error_color_bad_shader", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 0, 1 ), ), False, "errorColorBadShader", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:info", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logInfo", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:warnings", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logWarnings", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:errors", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logErrors", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:debug", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logDebug", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:ass_parse", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logAssParse", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:plugins", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logPlugins", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:progress", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logProgress", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:nan", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logNAN", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:timestamp", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logTimestamp", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:stats", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logStats", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:backtrace", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logBacktrace", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:memory", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logMemory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:log:color", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "logColor", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:info", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "consoleInfo", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:warnings", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "consoleWarnings", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:errors", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "consoleErrors", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:debug", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "consoleDebug", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:ass_parse", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "consoleAssParse", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:plugins", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "consolePlugins", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:progress", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "consoleProgress", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:nan", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "consoleNAN", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:timestamp", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "consoleTimestamp", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:stats", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "consoleStats", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:backtrace", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "consoleBacktrace", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:memory", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "consoleMemory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:console:color", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "consoleColor", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:ignore_textures", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreTextures", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:ignore_shaders", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreShaders", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:ignore_atmosphere", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreAtmosphere", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:ignore_lights", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreLights", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:ignore_shadows", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreShadows", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:ignore_subdivision", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreSubdivision", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:ignore_displacement", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreDisplacement", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:ignore_bump", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreBump", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:ignore_sss", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreSSS", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "ai:ignore_imagers", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreImagers", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.BoolPlug( "mBlur_enable", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "render:shutter", Gaffer.V2fPlug( "value", defaultValue = imath.V2f( -0.25, 0.25 ), ), False, "shutter", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.IntPlug( "transformBlurSegments_value", defaultValue = 1, minValue = 1, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.IntPlug( "deformationBlurSegments_value", defaultValue = 1, minValue = 1, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "linkedLights", Gaffer.StringPlug( "value", defaultValue = '', ), False, "linkedLights", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "filteredLights", Gaffer.StringPlug( "value", defaultValue = '', ), False, "filteredLights", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.NameValuePlug( "gaffer:automaticInstancing", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "automaticInstancing", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["RenderSettings"].addChild( Gaffer.BoolPlug( "Enable_ocio", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.BoolPlug( "transformBlur_enabled", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.BoolPlug( "deformationBlur_enabled", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.IntPlug( "aaSamples", defaultValue = 3, minValue = 1, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.IntPlug( "giDiffuseSamples", defaultValue = 2, minValue = 1, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.IntPlug( "giSpecularSamples", defaultValue = 2, minValue = 1, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.IntPlug( "giTransmissionSamples", defaultValue = 2, minValue = 1, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.IntPlug( "giSSSSamples", defaultValue = 2, minValue = 1, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.IntPlug( "giVolumeSamples", defaultValue = 2, minValue = 1, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.IntPlug( "lightSamples", defaultValue = 0, minValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.FloatPlug( "resolutionMultiplier", defaultValue = 1, minValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.Expression( "Expression1" ) )
__children["RenderSettings"]["Expression1"]["__in"].addChild( Gaffer.BoolPlug( "p0", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["Expression1"]["__out"].addChild( Gaffer.BoolPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["Expression1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.BoolPlug( "user_instantaneous_shutter", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( GafferScene.OptionTweaks( "crop_fixer" ) )
__children["RenderSettings"]["crop_fixer"]["tweaks"].addChild( Gaffer.TweakPlug( Gaffer.Box2fPlug( "value", defaultValue = imath.Box2f( imath.V2f( 0, 0.5 ), imath.V2f( 0.75, 1 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "tweak0", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"].addChild( Gaffer.Expression( "crop_fixer_expression" ) )
__children["RenderSettings"]["crop_fixer_expression"]["__in"].addChild( Gaffer.BoolPlug( "p0", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__in"].addChild( Gaffer.FloatPlug( "p1", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__in"].addChild( Gaffer.FloatPlug( "p2", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__in"].addChild( Gaffer.FloatPlug( "p3", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__in"].addChild( Gaffer.FloatPlug( "p4", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__in"].addChild( Gaffer.BoolPlug( "p5", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__in"].addChild( Gaffer.FloatPlug( "p6", defaultValue = 1.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__in"].addChild( Gaffer.FloatPlug( "p7", defaultValue = 1.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__in"].addChild( Gaffer.FloatPlug( "p8", defaultValue = 0.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__in"].addChild( Gaffer.FloatPlug( "p9", defaultValue = 0.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__out"].addChild( Gaffer.BoolPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__out"].addChild( Gaffer.FloatPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.75, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__out"].addChild( Gaffer.FloatPlug( "p2", direction = Gaffer.Plug.Direction.Out, defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__out"].addChild( Gaffer.FloatPlug( "p3", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"]["__out"].addChild( Gaffer.FloatPlug( "p4", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.5, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RenderSettings"]["crop_fixer_expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"], 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"], 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"], 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"], 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"], 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"], 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"], 'layout:section:Common:summary', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"], 'nodeGadget:color', imath.Color3f( 0.245800003, 0.419999987, 1 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"], 'description', "Custom node to mimic as much as posible maya's render settings.\n\nHelpful to new gaffer users to make transition from maya." )
Gaffer.Metadata.registerValue( __children["RenderSettings"], 'defaulticon', 'AYON_icon_dev.png' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["user"], 'layout:section', 'User' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["user"], 'nodule:type', '' )
__children["RenderSettings"]["__uiPosition"].setValue( imath.V2f( 186.809906, -14.3078766 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["__uiPosition"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["__uiPosition"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["StandardOptions"]["user"], 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["StandardOptions"]["user"], 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
__children["RenderSettings"]["StandardOptions"]["user"]["Resolution"].setValue( 0.5 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["StandardOptions"]["user"]["Resolution"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["StandardOptions"]["user"]["Resolution"], 'layout:section', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["StandardOptions"]["user"]["Resolution"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["StandardOptions"]["user"]["Resolution"], 'preset:Full', 1.0 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["StandardOptions"]["user"]["Resolution"], 'preset:Half', 0.5 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["StandardOptions"]["user"]["Resolution"], 'preset:Quarter', 0.25 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["StandardOptions"]["user"]["useMotionBlur"], 'nodule:type', '' )
__children["RenderSettings"]["StandardOptions"]["user"]["instantaneous_shutter"].setInput( __children["RenderSettings"]["user_instantaneous_shutter"] )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["StandardOptions"]["user"]["instantaneous_shutter"], 'nodule:type', '' )
__children["RenderSettings"]["StandardOptions"]["in"].setInput( __children["RenderSettings"]["BoxIn"]["out"] )
__children["RenderSettings"]["StandardOptions"]["options"]["renderResolution"]["enabled"].setValue( True )
__children["RenderSettings"]["StandardOptions"]["options"]["transformBlur"]["enabled"].setValue( True )
__children["RenderSettings"]["StandardOptions"]["options"]["deformationBlur"]["enabled"].setValue( True )
__children["RenderSettings"]["StandardOptions"]["options"]["renderCamera"].setInput( __children["RenderSettings"]["renderCamera"] )
__children["RenderSettings"]["StandardOptions"]["options"]["pixelAspectRatio"].setInput( __children["RenderSettings"]["pixelAspectRatio"] )
__children["RenderSettings"]["StandardOptions"]["options"]["resolutionMultiplier"]["value"].setInput( __children["RenderSettings"]["resolution_multiplier"])
__children["RenderSettings"]["StandardOptions"]["options"]["resolutionMultiplier"]["enabled"].setValue( True )
__children["RenderSettings"]["StandardOptions"]["options"]["renderCropWindow"].setInput( __children["RenderSettings"]["options_renderCropWindow"] )
__children["RenderSettings"]["StandardOptions"]["options"]["overscan"].setInput( __children["RenderSettings"]["options_overscan"] )
__children["RenderSettings"]["StandardOptions"]["options"]["overscanTop"].setInput( __children["RenderSettings"]["options_overscanTop"] )
__children["RenderSettings"]["StandardOptions"]["options"]["overscanBottom"].setInput( __children["RenderSettings"]["options_overscanBottom"] )
__children["RenderSettings"]["StandardOptions"]["options"]["overscanLeft"].setInput( __children["RenderSettings"]["options_overscanLeft"] )
__children["RenderSettings"]["StandardOptions"]["options"]["overscanRight"].setInput( __children["RenderSettings"]["options_overscanRight"] )
__children["RenderSettings"]["StandardOptions"]["options"]["depthOfField"].setInput( __children["RenderSettings"]["depthOfField"] )
__children["RenderSettings"]["StandardOptions"]["options"]["transformBlur"]["value"].setInput( __children["RenderSettings"]["mBlur_enable"] )
__children["RenderSettings"]["StandardOptions"]["options"]["deformationBlur"]["value"].setInput( __children["RenderSettings"]["mBlur_enable"] )
__children["RenderSettings"]["StandardOptions"]["options"]["shutter"].setInput( __children["RenderSettings"]["shutter"] )
__children["RenderSettings"]["StandardOptions"]["options"]["sampleMotion"]["value"].setInput( __children["RenderSettings"]["Expression1"]["__out"]["p0"] )
__children["RenderSettings"]["StandardOptions"]["options"]["sampleMotion"]["enabled"].setInput( __children["RenderSettings"]["mBlur_enable"] )
__children["RenderSettings"]["StandardOptions"]["__uiPosition"].setValue( imath.V2f( -6.82941866, 17.2172565 ) )
__children["RenderSettings"]["BoxIn"]["__in"].setInput( __children["RenderSettings"]["in"] )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxIn"]["__in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxIn"]["out"], 'noduleLayout:section', 'bottom' )
__children["RenderSettings"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( 17.5705872, 25.5492859 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["in"], 'layout:index', 100 )
__children["RenderSettings"]["BoxOut"]["in"].setInput( __children["RenderSettings"]["crop_fixer"]["out"] )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxOut"]["__out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxOut"]["__out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["RenderSettings"]["BoxOut"]["passThrough"].setInput( __children["RenderSettings"]["BoxIn"]["out"] )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["BoxOut"]["passThrough"], 'noduleLayout:section', 'top' )
__children["RenderSettings"]["BoxOut"]["enabled"].setInput( __children["RenderSettings"]["enabled"] )
__children["RenderSettings"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( 16.0705872, -32.6536942 ) )
__children["RenderSettings"]["out"].setInput( __children["RenderSettings"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["out"], 'layout:index', 101 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enabled"], 'layout:index', 102 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enabled"], 'nodule:type', '' )
__children["RenderSettings"]["ArnoldOptions"]["in"].setInput( __children["RenderSettings"]["StandardAttributes"]["out"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["bucketSize"].setInput( __children["RenderSettings"]["bucketSize"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["bucketScanning"].setInput( __children["RenderSettings"]["bucketScanning"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["parallelNodeInit"].setInput( __children["RenderSettings"]["parallelNodeInit"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["threads"].setInput( __children["RenderSettings"]["threads"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["aaSamples"]["value"].setInput( __children["RenderSettings"]["aaSamples"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["aaSamples"]["enabled"].setValue(True)
__children["RenderSettings"]["ArnoldOptions"]["options"]["giDiffuseSamples"]["value"].setInput( __children["RenderSettings"]["giDiffuseSamples"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["giDiffuseSamples"]["enabled"].setValue(True)
__children["RenderSettings"]["ArnoldOptions"]["options"]["giSpecularSamples"]["value"].setInput( __children["RenderSettings"]["giSpecularSamples"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["giSpecularSamples"]["enabled"].setValue(True)
__children["RenderSettings"]["ArnoldOptions"]["options"]["giTransmissionSamples"]["value"].setInput( __children["RenderSettings"]["giTransmissionSamples"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["giTransmissionSamples"]["enabled"].setValue(True)
__children["RenderSettings"]["ArnoldOptions"]["options"]["giSSSSamples"]["value"].setInput( __children["RenderSettings"]["giSSSSamples"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["giSSSSamples"]["enabled"].setValue(True)
__children["RenderSettings"]["ArnoldOptions"]["options"]["giVolumeSamples"]["value"].setInput( __children["RenderSettings"]["giVolumeSamples"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["giVolumeSamples"]["enabled"].setValue(True)
__children["RenderSettings"]["ArnoldOptions"]["options"]["lightSamples"]["value"].setInput( __children["RenderSettings"]["lightSamples"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["lightSamples"]["enabled"].setValue(True)
__children["RenderSettings"]["ArnoldOptions"]["options"]["aaSeed"].setInput( __children["RenderSettings"]["aaSeed"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["aaSampleClamp"].setInput( __children["RenderSettings"]["aaSampleClamp"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["aaSampleClampAffectsAOVs"].setInput( __children["RenderSettings"]["aaSampleClampAffectsAOVs"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["indirectSampleClamp"].setInput( __children["RenderSettings"]["indirectSampleClamp"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["lowLightThreshold"].setInput( __children["RenderSettings"]["lowLightThreshold"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["enableAdaptiveSampling"].setInput( __children["RenderSettings"]["enableAdaptiveSampling"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["aaSamplesMax"].setInput( __children["RenderSettings"]["aaSamplesMax"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["aaAdaptiveThreshold"].setInput( __children["RenderSettings"]["aaAdaptiveThreshold"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["enableProgressiveRender"].setInput( __children["RenderSettings"]["enableProgressiveRender"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["progressiveMinAASamples"].setInput( __children["RenderSettings"]["progressiveMinAASamples"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["giTotalDepth"].setInput( __children["RenderSettings"]["giTotalDepth"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["giDiffuseDepth"].setInput( __children["RenderSettings"]["giDiffuseDepth"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["giSpecularDepth"].setInput( __children["RenderSettings"]["giSpecularDepth"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["giTransmissionDepth"].setInput( __children["RenderSettings"]["giTransmissionDepth"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["giVolumeDepth"].setInput( __children["RenderSettings"]["giVolumeDepth"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["autoTransparencyDepth"].setInput( __children["RenderSettings"]["autoTransparencyDepth"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["maxSubdivisions"].setInput( __children["RenderSettings"]["maxSubdivisions"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["subdivDicingCamera"].setInput( __children["RenderSettings"]["subdivDicingCamera"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["subdivFrustumCulling"].setInput( __children["RenderSettings"]["subdivFrustumCulling"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["subdivFrustumPadding"].setInput( __children["RenderSettings"]["subdivFrustumPadding"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["textureMaxMemoryMB"].setInput( __children["RenderSettings"]["textureMaxMemoryMB"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["texturePerFileStats"].setInput( __children["RenderSettings"]["texturePerFileStats"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["textureMaxSharpen"].setInput( __children["RenderSettings"]["textureMaxSharpen"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["ignoreTextures"].setInput( __children["RenderSettings"]["ignoreTextures"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["ignoreShaders"].setInput( __children["RenderSettings"]["ignoreShaders"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["ignoreAtmosphere"].setInput( __children["RenderSettings"]["ignoreAtmosphere"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["ignoreLights"].setInput( __children["RenderSettings"]["ignoreLights"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["ignoreShadows"].setInput( __children["RenderSettings"]["ignoreShadows"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["ignoreSubdivision"].setInput( __children["RenderSettings"]["ignoreSubdivision"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["ignoreDisplacement"].setInput( __children["RenderSettings"]["ignoreDisplacement"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["ignoreBump"].setInput( __children["RenderSettings"]["ignoreBump"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["ignoreSSS"].setInput( __children["RenderSettings"]["ignoreSSS"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["ignoreImagers"].setInput( __children["RenderSettings"]["ignoreImagers"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["textureSearchPath"].setInput( __children["RenderSettings"]["textureSearchPath"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["proceduralSearchPath"].setInput( __children["RenderSettings"]["proceduralSearchPath"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["pluginSearchPath"].setInput( __children["RenderSettings"]["pluginSearchPath"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["abortOnError"].setInput( __children["RenderSettings"]["abortOnError"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["errorColorBadTexture"].setInput( __children["RenderSettings"]["errorColorBadTexture"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["errorColorBadPixel"].setInput( __children["RenderSettings"]["errorColorBadPixel"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["errorColorBadShader"].setInput( __children["RenderSettings"]["errorColorBadShader"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logFileName"].setInput( __children["RenderSettings"]["logFileName"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logMaxWarnings"].setInput( __children["RenderSettings"]["logMaxWarnings"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logInfo"].setInput( __children["RenderSettings"]["logInfo"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logWarnings"].setInput( __children["RenderSettings"]["logWarnings"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logErrors"].setInput( __children["RenderSettings"]["logErrors"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logDebug"].setInput( __children["RenderSettings"]["logDebug"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logAssParse"].setInput( __children["RenderSettings"]["logAssParse"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logPlugins"].setInput( __children["RenderSettings"]["logPlugins"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logProgress"].setInput( __children["RenderSettings"]["logProgress"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logNAN"].setInput( __children["RenderSettings"]["logNAN"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logTimestamp"].setInput( __children["RenderSettings"]["logTimestamp"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logStats"].setInput( __children["RenderSettings"]["logStats"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logBacktrace"].setInput( __children["RenderSettings"]["logBacktrace"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logMemory"].setInput( __children["RenderSettings"]["logMemory"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["logColor"].setInput( __children["RenderSettings"]["logColor"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleInfo"].setInput( __children["RenderSettings"]["consoleInfo"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleWarnings"].setInput( __children["RenderSettings"]["consoleWarnings"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleErrors"].setInput( __children["RenderSettings"]["consoleErrors"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleDebug"].setInput( __children["RenderSettings"]["consoleDebug"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleAssParse"].setInput( __children["RenderSettings"]["consoleAssParse"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consolePlugins"].setInput( __children["RenderSettings"]["consolePlugins"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleProgress"].setInput( __children["RenderSettings"]["consoleProgress"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleNAN"].setInput( __children["RenderSettings"]["consoleNAN"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleTimestamp"].setInput( __children["RenderSettings"]["consoleTimestamp"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleStats"].setInput( __children["RenderSettings"]["consoleStats"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleBacktrace"].setInput( __children["RenderSettings"]["consoleBacktrace"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleMemory"].setInput( __children["RenderSettings"]["consoleMemory"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["consoleColor"].setInput( __children["RenderSettings"]["consoleColor"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["statisticsFileName"].setInput( __children["RenderSettings"]["statisticsFileName"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["profileFileName"].setInput( __children["RenderSettings"]["profileFileName"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["abortOnLicenseFail"].setInput( __children["RenderSettings"]["abortOnLicenseFail"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["skipLicenseCheck"].setInput( __children["RenderSettings"]["skipLicenseCheck"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["renderDevice"].setInput( __children["RenderSettings"]["renderDevice"] )
__children["RenderSettings"]["ArnoldOptions"]["options"]["gpuMaxTextureResolution"].setInput( __children["RenderSettings"]["gpuMaxTextureResolution"] )
__children["RenderSettings"]["ArnoldOptions"]["__uiPosition"].setValue( imath.V2f( -6.82941723, 0.54929024 ) )
__children["RenderSettings"]["options_renderCropWindow"]["value"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 1, 1 ) ) )
__children["RenderSettings"]["options_renderCropWindow"]["enabled"].setValue( False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"], 'spreadsheet:columnName', 'renderCropWindow' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"], 'description', 'Limits the render to a region of the image. The rendered image\nwill have the same resolution as usual, but areas outside the\ncrop will be rendered black. Coordinates range from (0,0) at\nthe top-left of the image to (1,1) at the bottom-right. The\ncrop window tool in the viewer may be used to set this\ninteractively.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"], 'label', 'Crop Window' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"], 'layout:section', 'Common.Crop Render' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"], 'layout:index', 8 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"]["value"], 'spreadsheet:columnName', 'renderCropWindowValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"]["value"]["min"]["x"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"]["value"]["min"]["y"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"]["value"]["max"]["x"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"]["value"]["max"]["y"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_renderCropWindow"]["enabled"], 'spreadsheet:columnName', 'renderCropWindowEnabled' )
__children["RenderSettings"]["pixelAspectRatio"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pixelAspectRatio"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pixelAspectRatio"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pixelAspectRatio"], 'spreadsheet:columnName', 'pixelAspectRatio' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pixelAspectRatio"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pixelAspectRatio"], 'description', 'The `width / height` aspect ratio of the individual pixels in\nthe rendered image.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pixelAspectRatio"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pixelAspectRatio"], 'layout:section', 'Common.Image Size' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pixelAspectRatio"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pixelAspectRatio"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pixelAspectRatio"]["value"], 'spreadsheet:columnName', 'pixelAspectRatioValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pixelAspectRatio"]["enabled"], 'spreadsheet:columnName', 'pixelAspectRatioEnabled' )
__children["RenderSettings"]["renderCamera"]["value"].setValue( '/camera_GRP/layoutCam' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"], 'spreadsheet:columnName', 'renderCamera' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"], 'description', 'The primary camera to be used for rendering.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"], 'label', 'Camera' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"], 'layout:section', 'Common.Render Camera' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"]["value"], 'plugValueWidget:type', 'GafferSceneUI.ScenePathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"]["value"], 'path:valid', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"]["value"], 'scenePathPlugValueWidget:setNames', IECore.StringVectorData( [ '__cameras' ] ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"]["value"], 'scenePathPlugValueWidget:setsLabel', 'Show only cameras' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"]["value"], 'spreadsheet:columnName', 'renderCameraValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"]["value"], 'readOnly', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderCamera"]["enabled"], 'spreadsheet:columnName', 'renderCameraEnabled' )
__children["RenderSettings"]["StandardAttributes"]["in"].setInput( __children["RenderSettings"]["StandardOptions"]["out"] )
__children["RenderSettings"]["StandardAttributes"]["attributes"]["transformBlurSegments"]["enabled"].setValue( True )
__children["RenderSettings"]["StandardAttributes"]["attributes"]["deformationBlurSegments"]["enabled"].setValue( True )
__children["RenderSettings"]["StandardAttributes"]["attributes"]["transformBlur"]["value"].setInput( __children["RenderSettings"]["mBlur_enable"] )
__children["RenderSettings"]["StandardAttributes"]["attributes"]["transformBlur"]["enabled"].setInput( __children["RenderSettings"]["transformBlur_enabled"] )
__children["RenderSettings"]["StandardAttributes"]["attributes"]["transformBlurSegments"]["value"].setInput( __children["RenderSettings"]["transformBlurSegments_value"] )
__children["RenderSettings"]["StandardAttributes"]["attributes"]["deformationBlur"]["value"].setInput( __children["RenderSettings"]["mBlur_enable"] )
__children["RenderSettings"]["StandardAttributes"]["attributes"]["deformationBlur"]["enabled"].setInput( __children["RenderSettings"]["deformationBlur_enabled"] )
__children["RenderSettings"]["StandardAttributes"]["attributes"]["deformationBlurSegments"]["value"].setInput( __children["RenderSettings"]["deformationBlurSegments_value"] )
__children["RenderSettings"]["StandardAttributes"]["attributes"]["linkedLights"].setInput( __children["RenderSettings"]["linkedLights"] )
__children["RenderSettings"]["StandardAttributes"]["attributes"]["filteredLights"].setInput( __children["RenderSettings"]["filteredLights"] )
__children["RenderSettings"]["StandardAttributes"]["attributes"]["automaticInstancing"].setInput( __children["RenderSettings"]["automaticInstancing"] )
__children["RenderSettings"]["StandardAttributes"]["__uiPosition"].setValue( imath.V2f( -6.82941866, 9.05319405 ) )
__children["RenderSettings"]["depthOfField"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"], 'spreadsheet:columnName', 'depthOfField' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"], 'description', 'Whether to render with depth of field. To ensure the effect is\nvisible, you must also set an f-stop value greater than 0 on\nthis camera.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"], 'layout:section', 'Common.Render Camera' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"], 'divider', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"]["value"], 'spreadsheet:columnName', 'depthOfFieldValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["depthOfField"]["enabled"], 'spreadsheet:columnName', 'depthOfFieldEnabled' )
__children["RenderSettings"]["options_overscan"]["value"].setValue( False )
__children["RenderSettings"]["options_overscan"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscan"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscan"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscan"], 'spreadsheet:columnName', 'overscan' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscan"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscan"], 'description', 'Whether to enable overscan, which adds extra pixels to the\nsides of the rendered image.\n\nOverscan can be useful when camera shake or blur will be added\nas a post-process. This plug just enables overscan as a whole –\nuse the _Overscan Top_, _Overscan Bottom_, _Overscan Left_ and\n_Overscan Right_ plugs to specify the amount of overscan on\neach side of the image.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscan"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscan"], 'layout:section', 'Common.Overscan' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscan"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscan"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscan"]["value"], 'spreadsheet:columnName', 'overscanValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscan"]["enabled"], 'spreadsheet:columnName', 'overscanEnabled' )
__children["RenderSettings"]["options_overscanTop"]["value"].setValue( 0.05000000074505806 )
__children["RenderSettings"]["options_overscanTop"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"], 'spreadsheet:columnName', 'overscanTop' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"], 'description', 'The amount of overscan at the top of the image. Specified as \npercentage of the original image height.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"], 'layout:section', 'Common.Overscan' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"]["value"], 'spreadsheet:columnName', 'overscanTopValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanTop"]["enabled"], 'spreadsheet:columnName', 'overscanTopEnabled' )
__children["RenderSettings"]["options_overscanBottom"]["value"].setValue( 0.05000000074505806 )
__children["RenderSettings"]["options_overscanBottom"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"], 'spreadsheet:columnName', 'overscanBottom' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"], 'description', 'The amount of overscan at the bottom of the image. SSpecified as \npercentage of the original image height.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"], 'layout:section', 'Common.Overscan' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"]["value"], 'spreadsheet:columnName', 'overscanBottomValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanBottom"]["enabled"], 'spreadsheet:columnName', 'overscanBottomEnabled' )
__children["RenderSettings"]["options_overscanLeft"]["value"].setValue( 0.05000000074505806 )
__children["RenderSettings"]["options_overscanLeft"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"], 'spreadsheet:columnName', 'overscanLeft' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"], 'description', 'The amount of overscan at the left of the image. Specified as \npercentage of the original image width.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"], 'layout:section', 'Common.Overscan' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"], 'layout:index', 6 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"]["value"], 'spreadsheet:columnName', 'overscanLeftValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanLeft"]["enabled"], 'spreadsheet:columnName', 'overscanLeftEnabled' )
__children["RenderSettings"]["options_overscanRight"]["value"].setValue( 0.05000000074505806 )
__children["RenderSettings"]["options_overscanRight"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"], 'spreadsheet:columnName', 'overscanRight' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"], 'description', 'The amount of overscan at the right of the image. Specified as \npercentage of the original image width.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"], 'layout:section', 'Common.Overscan' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"], 'layout:index', 7 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"]["value"], 'spreadsheet:columnName', 'overscanRightValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["options_overscanRight"]["enabled"], 'spreadsheet:columnName', 'overscanRightEnabled' )
__children["RenderSettings"]["ColorManagerOcio"]["enabled"].setInput( __children["RenderSettings"]["Enable_ocio"] )
__children["RenderSettings"]["ColorManagerOcio"]["in"].setInput( __children["RenderSettings"]["ArnoldOptions"]["out"] )
__children["RenderSettings"]["ColorManagerOcio"]["parameters"]["config"].setInput( __children["RenderSettings"]["parameters_config"] )
__children["RenderSettings"]["ColorManagerOcio"]["__uiPosition"].setValue( imath.V2f( -6.82941723, -7.6147728 ) )
__children["RenderSettings"]["parameters_config"].setValue( '/job/wpipeline/config/ocio/aces_1.1/config.ocio' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parameters_config"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parameters_config"], 'description', None )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parameters_config"], 'plugValueWidget:type', 'GafferUI.PathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parameters_config"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parameters_config"], 'label', 'Config' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parameters_config"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parameters_config"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parameters_config"], 'noduleLayout:label', 'Config' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parameters_config"], 'noduleLayout:visible', None )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parameters_config"], 'layout:section', 'Common.Color Management' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parameters_config"], 'layout:index', 10 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"], 'spreadsheet:columnName', 'aaSeed' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"], 'description', 'Seeds the randomness used when generating samples.\nBy default this is set to the current frame number\nso that the pattern of sampling noise changes every\nframe. It can be locked to a particular value so\nthat sampling noise does not change from frame to\nframe.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"], 'label', 'AA Seed' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"], 'layout:section', 'Arnold.Sampling And Res' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"], 'layout:index', 18 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"]["value"], 'spreadsheet:columnName', 'aaSeedValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSeed"]["enabled"], 'spreadsheet:columnName', 'aaSeedEnabled' )
__children["RenderSettings"]["enableAdaptiveSampling"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"], 'spreadsheet:columnName', 'enableAdaptiveSampling' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"], 'description', "If adaptive sampling is enabled, Arnold will take a minimum\nof ( aaSamples * aaSamples ) samples per pixel, and will then\ntake up to ( aaSamplesMax * aaSamplesMax ) samples per pixel,\nor until the remaining estimated noise gets lower than\naaAdaptiveThreshold.\n\n> Note : Arnold's adaptive sampling won't do anything if aaSamples == 1 : you need to set aaSamples to at least 2." )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"], 'label', 'Enable Adaptive Sampling' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"], 'layout:section', 'Arnold.Adaptive Sampling' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"], 'layout:index', 19 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"]["value"], 'spreadsheet:columnName', 'enableAdaptiveSamplingValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableAdaptiveSampling"]["enabled"], 'spreadsheet:columnName', 'enableAdaptiveSamplingEnabled' )
__children["RenderSettings"]["aaSamplesMax"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"], 'spreadsheet:columnName', 'aaSamplesMax' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"], 'description', 'The maximum sampling rate during adaptive sampling.  Like\naaSamples, this value is squared.  So aaSamplesMax == 6 means up to 36 samples per pixel.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"], 'label', 'AA Samples Max' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"], 'layout:section', 'Arnold.Adaptive Sampling' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"], 'layout:index', 16 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"]["value"], 'spreadsheet:columnName', 'aaSamplesMaxValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamplesMax"]["enabled"], 'spreadsheet:columnName', 'aaSamplesMaxEnabled' )
__children["RenderSettings"]["aaAdaptiveThreshold"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"], 'spreadsheet:columnName', 'aaAdaptiveThreshold' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"], 'description', 'How much leftover noise is acceptable when terminating adaptive sampling.  Higher values\naccept more noise, lower values keep rendering longer to achieve smaller amounts of\nnoise.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"], 'label', 'AA Adaptive Threshold' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"], 'layout:section', 'Arnold.Adaptive Sampling' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"], 'layout:index', 17 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"]["value"], 'spreadsheet:columnName', 'aaAdaptiveThresholdValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaAdaptiveThreshold"]["enabled"], 'spreadsheet:columnName', 'aaAdaptiveThresholdEnabled' )
__children["RenderSettings"]["enableProgressiveRender"]["value"].setValue( False )
__children["RenderSettings"]["enableProgressiveRender"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"], 'spreadsheet:columnName', 'enableProgressiveRender' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"], 'description', 'Enables progressive rendering, with a series of coarse low-resolution\nrenders followed by a full quality render updated continuously.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"], 'label', 'Progressive' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"], 'layout:section', 'Arnold.Sampling And Res' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"], 'layout:index', 19 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"]["value"], 'spreadsheet:columnName', 'enableProgressiveRenderValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["enableProgressiveRender"]["enabled"], 'spreadsheet:columnName', 'enableProgressiveRenderEnabled' )
__children["RenderSettings"]["progressiveMinAASamples"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"], 'spreadsheet:columnName', 'progressiveMinAASamples' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"], 'description', 'Controls the coarseness of the first low resolution pass\nof interactive rendering. A value of `-4` starts with 16x16 pixel\nblocks, `-3` gives 8x8 blocks, `-2` gives 4x4, `-1` gives 2x2 and\n`0` disables the low resolution passes completely.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"], 'label', 'Min AA Samples' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"], 'layout:section', 'Arnold.Sampling And Res' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"], 'layout:index', 19 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"]["value"], 'spreadsheet:columnName', 'progressiveMinAASamplesValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["progressiveMinAASamples"]["enabled"], 'spreadsheet:columnName', 'progressiveMinAASamplesEnabled' )
__children["RenderSettings"]["aaSampleClamp"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"], 'spreadsheet:columnName', 'aaSampleClamp' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"], 'description', 'Sets a maximum for the values of individual pixel samples. This\ncan help reduce fireflies.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"], 'label', 'Sample Clamp' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"], 'layout:section', 'Arnold.Clamping' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"], 'layout:index', 19 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"]["value"], 'spreadsheet:columnName', 'aaSampleClampValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClamp"]["enabled"], 'spreadsheet:columnName', 'aaSampleClampEnabled' )
__children["RenderSettings"]["aaSampleClampAffectsAOVs"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"], 'spreadsheet:columnName', 'aaSampleClampAffectsAOVs' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"], 'description', 'Applies the sample clamping settings to all RGB and RGBA\nAOVs, in addition to the beauty image.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"], 'label', 'Clamp AOVs' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"], 'layout:section', 'Arnold.Clamping' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"], 'layout:index', 18 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"]["value"], 'spreadsheet:columnName', 'aaSampleClampAffectsAOVsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSampleClampAffectsAOVs"]["enabled"], 'spreadsheet:columnName', 'aaSampleClampAffectsAOVsEnabled' )
__children["RenderSettings"]["indirectSampleClamp"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"], 'spreadsheet:columnName', 'indirectSampleClamp' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"], 'description', 'Clamp fireflies resulting from indirect calculations.\nMay cause problems with dulling highlights in reflections.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"], 'label', 'Indirect Sample Clamp' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"], 'layout:section', 'Arnold.Clamping' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"], 'layout:index', 20 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"]["value"], 'spreadsheet:columnName', 'indirectSampleClampValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["indirectSampleClamp"]["enabled"], 'spreadsheet:columnName', 'indirectSampleClampEnabled' )
__children["RenderSettings"]["lowLightThreshold"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"], 'spreadsheet:columnName', 'lowLightThreshold' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"], 'description', 'Light paths with less energy than this will be discarded.  This\nsaves tracing shadow rays, but cuts off the light when it gets dim.\nRaising this improves performance, but makes the image potentially\ndarker in some areas.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"], 'label', 'Low Light Threshold' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"], 'layout:section', 'Arnold.Lights' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"], 'layout:index', 34 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"]["value"], 'spreadsheet:columnName', 'lowLightThresholdValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lowLightThreshold"]["enabled"], 'spreadsheet:columnName', 'lowLightThresholdEnabled' )
__children["RenderSettings"]["giTotalDepth"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"], 'spreadsheet:columnName', 'giTotalDepth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"], 'description', 'The maximum depth of any ray (Diffuse + Specular +\nTransmission + Volume).' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"], 'label', 'Total Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"], 'layout:section', 'Arnold.Ray Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"], 'layout:index', 21 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"]["value"], 'spreadsheet:columnName', 'giTotalDepthValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTotalDepth"]["enabled"], 'spreadsheet:columnName', 'giTotalDepthEnabled' )
__children["RenderSettings"]["giDiffuseDepth"]["value"].setValue( 1 )
__children["RenderSettings"]["giDiffuseDepth"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"], 'spreadsheet:columnName', 'giDiffuseDepth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"], 'description', 'Controls the number of ray bounces when\ncomputing indirect illumination ("bounce light").' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"], 'label', 'Diffuse Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"], 'layout:section', 'Arnold.Ray Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"], 'layout:index', 22 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"]["value"], 'spreadsheet:columnName', 'giDiffuseDepthValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseDepth"]["enabled"], 'spreadsheet:columnName', 'giDiffuseDepthEnabled' )
__children["RenderSettings"]["giSpecularDepth"]["value"].setValue( 1 )
__children["RenderSettings"]["giSpecularDepth"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"], 'spreadsheet:columnName', 'giSpecularDepth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"], 'description', 'Controls the number of ray bounces when\ncomputing specular reflections.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"], 'label', 'Specular Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"], 'layout:section', 'Arnold.Ray Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"], 'layout:index', 23 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"]["value"], 'spreadsheet:columnName', 'giSpecularDepthValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularDepth"]["enabled"], 'spreadsheet:columnName', 'giSpecularDepthEnabled' )
__children["RenderSettings"]["giTransmissionDepth"]["value"].setValue( 8 )
__children["RenderSettings"]["giTransmissionDepth"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"], 'spreadsheet:columnName', 'giTransmissionDepth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"], 'description', 'Controls the number of ray bounces when\ncomputing specular refractions.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"], 'label', 'Transmission Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"], 'layout:section', 'Arnold.Ray Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"], 'layout:index', 24 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"]["value"], 'spreadsheet:columnName', 'giTransmissionDepthValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionDepth"]["enabled"], 'spreadsheet:columnName', 'giTransmissionDepthEnabled' )
__children["RenderSettings"]["giVolumeDepth"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"], 'spreadsheet:columnName', 'giVolumeDepth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"], 'description', 'Controls the number of ray bounces when\ncomputing indirect lighting on volumes.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"], 'label', 'Volume Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"], 'layout:section', 'Arnold.Ray Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"], 'layout:index', 25 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"]["value"], 'spreadsheet:columnName', 'giVolumeDepthValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeDepth"]["enabled"], 'spreadsheet:columnName', 'giVolumeDepthEnabled' )
__children["RenderSettings"]["autoTransparencyDepth"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"], 'spreadsheet:columnName', 'autoTransparencyDepth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"], 'description', 'The number of allowable transparent layers - after\nthis the last object will be treated as opaque.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"], 'label', 'Transparency Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"], 'layout:section', 'Arnold.Ray Depth' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"], 'layout:index', 26 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"]["value"], 'spreadsheet:columnName', 'autoTransparencyDepthValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["autoTransparencyDepth"]["enabled"], 'spreadsheet:columnName', 'autoTransparencyDepthEnabled' )
__children["RenderSettings"]["textureMaxMemoryMB"]["value"].setValue( 50176.0 )
__children["RenderSettings"]["textureMaxMemoryMB"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"], 'spreadsheet:columnName', 'textureMaxMemoryMB' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"], 'description', 'The maximum amount of memory to use for caching\ntextures. Tiles are loaded on demand and cached,\nand when the memory limit is reached the least\nrecently used tiles are discarded to make room\nfor more. Measured in megabytes.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"], 'label', 'Max Memory MB' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"], 'layout:section', 'Arnold.Textures' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"], 'layout:index', 37 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"]["value"], 'spreadsheet:columnName', 'textureMaxMemoryMBValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxMemoryMB"]["enabled"], 'spreadsheet:columnName', 'textureMaxMemoryMBEnabled' )
__children["RenderSettings"]["texturePerFileStats"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"], 'spreadsheet:columnName', 'texturePerFileStats' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"], 'description', 'Turns on detailed statistics output for\neach individual texture file used.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"], 'label', 'Per File Stats' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"], 'layout:section', 'Arnold.Textures' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"], 'layout:index', 39 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"]["value"], 'spreadsheet:columnName', 'texturePerFileStatsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["texturePerFileStats"]["enabled"], 'spreadsheet:columnName', 'texturePerFileStatsEnabled' )
__children["RenderSettings"]["textureMaxSharpen"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"], 'spreadsheet:columnName', 'textureMaxSharpen' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"], 'description', "Controls the sharpness of texture lookups,\nproviding a tradeoff between sharpness and\nthe amount of texture data loaded. If\ntextures appear too blurry, then the value\nshould be increased to add sharpness.\n\nThe theoretical optimum value is to match the\nnumber of AA samples, but in practice the\nimprovement in sharpness this brings often\ndoesn't justify the increased render time and\nmemory usage." )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"], 'label', 'Max Sharpen' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"], 'layout:section', 'Arnold.Textures' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"], 'layout:index', 38 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"]["value"], 'spreadsheet:columnName', 'textureMaxSharpenValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureMaxSharpen"]["enabled"], 'spreadsheet:columnName', 'textureMaxSharpenEnabled' )
__children["RenderSettings"]["maxSubdivisions"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"], 'spreadsheet:columnName', 'maxSubdivisions' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"], 'description', 'A global override for the maximum polymesh.subdiv_iterations.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"], 'label', 'Max Subdivisions' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"], 'layout:section', 'Arnold.Subdivisions' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"], 'layout:index', 40 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"]["value"], 'spreadsheet:columnName', 'maxSubdivisionsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["maxSubdivisions"]["enabled"], 'spreadsheet:columnName', 'maxSubdivisionsEnabled' )
__children["RenderSettings"]["subdivDicingCamera"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"], 'spreadsheet:columnName', 'subdivDicingCamera' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"], 'description', 'If specified, adaptive subdivision will be performed\nrelative to this camera, instead of the render camera.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"], 'label', 'Subdiv Dicing Camera' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"], 'layout:section', 'Arnold.Subdivisions' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"], 'layout:index', 41 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"]["value"], 'plugValueWidget:type', 'GafferSceneUI.ScenePathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"]["value"], 'path:valid', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"]["value"], 'scenePathPlugValueWidget:setNames', IECore.StringVectorData( [ '__cameras' ] ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"]["value"], 'scenePathPlugValueWidget:setsLabel', 'Show only cameras' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"]["value"], 'spreadsheet:columnName', 'subdivDicingCameraValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivDicingCamera"]["enabled"], 'spreadsheet:columnName', 'subdivDicingCameraEnabled' )
__children["RenderSettings"]["subdivFrustumCulling"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"], 'spreadsheet:columnName', 'subdivFrustumCulling' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"], 'description', 'Disable subdivision of polygons outside the camera frustum.\n( Uses dicing camera if one has been set ).\nSaves performance, at the cost of inaccurate reflections\nand shadows.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"], 'label', 'Subdiv Frustum Culling' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"], 'layout:section', 'Arnold.Subdivisions' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"], 'layout:index', 42 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"]["value"], 'spreadsheet:columnName', 'subdivFrustumCullingValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumCulling"]["enabled"], 'spreadsheet:columnName', 'subdivFrustumCullingEnabled' )
__children["RenderSettings"]["subdivFrustumPadding"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"], 'spreadsheet:columnName', 'subdivFrustumPadding' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"], 'description', 'When using subdivFrustumCulling, adds a world space bound\naround the frustum where subdivision still occurs.  Can be\nused to improve shadows, reflections, and objects the motion\nblur into frame.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"], 'label', 'Subdiv Frustum Padding' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"], 'layout:section', 'Arnold.Subdivisions' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"], 'layout:index', 43 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"]["value"], 'spreadsheet:columnName', 'subdivFrustumPaddingValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["subdivFrustumPadding"]["enabled"], 'spreadsheet:columnName', 'subdivFrustumPaddingEnabled' )
__children["RenderSettings"]["renderDevice"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"], 'spreadsheet:columnName', 'renderDevice' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"], 'description', 'Can be used to put Arnold in GPU rendering mode, using your graphics card instead of CPU.  This is currently a beta with limited stability, and missing support for OSL and volumes.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"], 'layout:section', 'System.Device Selection' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"], 'layout:index', 44 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"]["value"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"]["value"], 'presetNames', IECore.StringVectorData( [ 'CPU', 'GPU' ] ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"]["value"], 'presetValues', IECore.StringVectorData( [ 'CPU', 'GPU' ] ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"]["value"], 'spreadsheet:columnName', 'renderDeviceValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["renderDevice"]["enabled"], 'spreadsheet:columnName', 'renderDeviceEnabled' )
__children["RenderSettings"]["gpuMaxTextureResolution"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"], 'spreadsheet:columnName', 'gpuMaxTextureResolution' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"], 'description', 'If non-zero, this will omit the high resolution mipmaps when in GPU mode, to avoid running out of GPU memory.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"], 'label', 'Max Texture Resolution' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"], 'layout:section', 'System.Device Selection' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"], 'layout:index', 45 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"]["value"], 'spreadsheet:columnName', 'gpuMaxTextureResolutionValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["gpuMaxTextureResolution"]["enabled"], 'spreadsheet:columnName', 'gpuMaxTextureResolutionEnabled' )
__children["RenderSettings"]["bucketSize"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"], 'spreadsheet:columnName', 'bucketSize' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"], 'description', 'Controls the size of the image buckets.\nThe default size is 64x64 pixels.\nBigger buckets will increase memory usage\nwhile smaller buckets may render slower as\nthey need to perform redundant computations\nand filtering.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"], 'label', 'Bucket Size' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"], 'layout:section', 'System.Render Settings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"], 'layout:index', 47 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"]["value"], 'spreadsheet:columnName', 'bucketSizeValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketSize"]["enabled"], 'spreadsheet:columnName', 'bucketSizeEnabled' )
__children["RenderSettings"]["bucketScanning"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"], 'spreadsheet:columnName', 'bucketScanning' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"], 'description', 'Controls the order in which buckets are\nprocessed. A spiral pattern is the default.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"], 'label', 'Bucket Scanning' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"], 'layout:section', 'System.Render Settings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"], 'layout:index', 46 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"]["value"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"]["value"], 'presetNames', IECore.StringVectorData( [ 'Top', 'Left', 'Random', 'Spiral', 'Hilbert' ] ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"]["value"], 'presetValues', IECore.StringVectorData( [ 'top', 'left', 'random', 'spiral', 'hilbert' ] ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"]["value"], 'spreadsheet:columnName', 'bucketScanningValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["bucketScanning"]["enabled"], 'spreadsheet:columnName', 'bucketScanningEnabled' )
__children["RenderSettings"]["parallelNodeInit"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parallelNodeInit"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parallelNodeInit"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parallelNodeInit"], 'spreadsheet:columnName', 'parallelNodeInit' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parallelNodeInit"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parallelNodeInit"], 'description', "Enables Arnold's parallel node initialization.\nNote that some Arnold features may not be\nthread-safe, in which case enabling this option\ncan cause crashes. One such example is Cryptomatte\nand its use in the AlSurface shader." )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parallelNodeInit"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parallelNodeInit"], 'layout:section', 'System.Render Settings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parallelNodeInit"], 'layout:index', 49 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parallelNodeInit"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parallelNodeInit"]["value"], 'spreadsheet:columnName', 'parallelNodeInitValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["parallelNodeInit"]["enabled"], 'spreadsheet:columnName', 'parallelNodeInitEnabled' )
__children["RenderSettings"]["threads"]["value"].setValue( 0 )
__children["RenderSettings"]["threads"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["threads"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["threads"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["threads"], 'spreadsheet:columnName', 'threads' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["threads"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["threads"], 'description', 'Specifies the number of threads Arnold\nis allowed to use. A value of 0 gives\nArnold access to all available threads.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["threads"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["threads"], 'layout:section', 'System.Render Settings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["threads"], 'layout:index', 48 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["threads"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["threads"]["value"], 'spreadsheet:columnName', 'threadsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["threads"]["enabled"], 'spreadsheet:columnName', 'threadsEnabled' )
__children["RenderSettings"]["textureSearchPath"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"], 'spreadsheet:columnName', 'textureSearchPath' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"], 'description', 'The locations used to search for texture\nfiles.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"], 'label', 'Textures' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"], 'layout:section', 'System.Search Paths' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"], 'layout:index', 51 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"]["value"], 'spreadsheet:columnName', 'textureSearchPathValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["textureSearchPath"]["enabled"], 'spreadsheet:columnName', 'textureSearchPathEnabled' )
__children["RenderSettings"]["proceduralSearchPath"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"], 'spreadsheet:columnName', 'proceduralSearchPath' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"], 'description', 'The locations used to search for procedural\nDSOs.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"], 'label', 'Procedurals' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"], 'layout:section', 'System.Search Paths' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"], 'layout:index', 52 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"]["value"], 'spreadsheet:columnName', 'proceduralSearchPathValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["proceduralSearchPath"]["enabled"], 'spreadsheet:columnName', 'proceduralSearchPathEnabled' )
__children["RenderSettings"]["pluginSearchPath"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"], 'spreadsheet:columnName', 'pluginSearchPath' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"], 'description', 'The locations used to search for shaders and other plugins.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"], 'label', 'Plugins (Shaders)' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"], 'layout:section', 'System.Search Paths' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"], 'layout:index', 53 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"]["value"], 'spreadsheet:columnName', 'pluginSearchPathValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["pluginSearchPath"]["enabled"], 'spreadsheet:columnName', 'pluginSearchPathEnabled' )
__children["RenderSettings"]["abortOnLicenseFail"]["value"].setValue( True )
__children["RenderSettings"]["abortOnLicenseFail"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnLicenseFail"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnLicenseFail"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnLicenseFail"], 'spreadsheet:columnName', 'abortOnLicenseFail' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnLicenseFail"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnLicenseFail"], 'description', 'Aborts the render if a license is not available,\ninstead of rendering with a watermark.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnLicenseFail"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnLicenseFail"], 'layout:section', 'System.Licensing' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnLicenseFail"], 'layout:index', 54 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnLicenseFail"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnLicenseFail"]["value"], 'spreadsheet:columnName', 'abortOnLicenseFailValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnLicenseFail"]["enabled"], 'spreadsheet:columnName', 'abortOnLicenseFailEnabled' )
__children["RenderSettings"]["skipLicenseCheck"]["value"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["skipLicenseCheck"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["skipLicenseCheck"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["skipLicenseCheck"], 'spreadsheet:columnName', 'skipLicenseCheck' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["skipLicenseCheck"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["skipLicenseCheck"], 'description', 'Skips the check for a license, always rendering\nwith a watermark.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["skipLicenseCheck"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["skipLicenseCheck"], 'layout:section', 'System.Licensing' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["skipLicenseCheck"], 'layout:index', 55 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["skipLicenseCheck"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["skipLicenseCheck"]["value"], 'spreadsheet:columnName', 'skipLicenseCheckValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["skipLicenseCheck"]["enabled"], 'spreadsheet:columnName', 'skipLicenseCheckEnabled' )
__children["RenderSettings"]["logFileName"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"], 'spreadsheet:columnName', 'logFileName' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"], 'description', 'The name of a log file which Arnold will generate\nwhile rendering.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"], 'label', 'File Name' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"], 'layout:section', 'Diagnostic.Log' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"], 'layout:index', 56 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"]["value"], 'plugValueWidget:type', 'GafferUI.FileSystemPathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"]["value"], 'path:leaf', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"]["value"], 'fileSystemPath:extensions', 'txt log' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"]["value"], 'fileSystemPath:extensionsLabel', 'Show only log files' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"]["value"], 'spreadsheet:columnName', 'logFileNameValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logFileName"]["enabled"], 'spreadsheet:columnName', 'logFileNameEnabled' )
__children["RenderSettings"]["logMaxWarnings"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"], 'spreadsheet:columnName', 'logMaxWarnings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"], 'description', 'The maximum number of warnings that will be reported.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"], 'label', 'Max Warnings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"], 'layout:section', 'Diagnostic.Log' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"], 'layout:index', 57 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"]["value"], 'spreadsheet:columnName', 'logMaxWarningsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMaxWarnings"]["enabled"], 'spreadsheet:columnName', 'logMaxWarningsEnabled' )
__children["RenderSettings"]["statisticsFileName"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"], 'spreadsheet:columnName', 'statisticsFileName' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"], 'description', 'The name of a statistics file where Arnold will store structured\nJSON statistics.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"], 'label', 'Statistics File' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"], 'layout:section', 'Diagnostic.Log' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"], 'layout:index', 58 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"]["value"], 'spreadsheet:columnName', 'statisticsFileNameValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["statisticsFileName"]["enabled"], 'spreadsheet:columnName', 'statisticsFileNameEnabled' )
__children["RenderSettings"]["profileFileName"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"], 'spreadsheet:columnName', 'profileFileName' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"], 'description', 'The name of a profile json file where Arnold will store a\ndetailed node performance graph. Use chrome://tracing to\nview the profile.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"], 'label', 'Profile File' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"], 'layout:section', 'Diagnostic.Log' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"], 'layout:index', 59 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"]["value"], 'spreadsheet:columnName', 'profileFileNameValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["profileFileName"]["enabled"], 'spreadsheet:columnName', 'profileFileNameEnabled' )
__children["RenderSettings"]["abortOnError"]["value"].setValue( False )
__children["RenderSettings"]["abortOnError"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnError"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnError"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnError"], 'spreadsheet:columnName', 'abortOnError' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnError"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnError"], 'description', 'Aborts the render if an error is encountered.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnError"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnError"], 'layout:section', 'Diagnostic.Error Handling' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnError"], 'layout:index', 60 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnError"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnError"]["value"], 'spreadsheet:columnName', 'abortOnErrorValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["abortOnError"]["enabled"], 'spreadsheet:columnName', 'abortOnErrorEnabled' )
__children["RenderSettings"]["errorColorBadTexture"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"], 'spreadsheet:columnName', 'errorColorBadTexture' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"], 'description', 'The colour to display if an attempt is\nmade to use a bad or non-existent texture.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"], 'label', 'Bad Texture' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"], 'layout:section', 'Diagnostic.Error Handling' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"], 'layout:index', 61 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"]["value"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"]["value"], 'spreadsheet:columnName', 'errorColorBadTextureValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"]["value"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"]["value"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"]["value"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadTexture"]["enabled"], 'spreadsheet:columnName', 'errorColorBadTextureEnabled' )
__children["RenderSettings"]["errorColorBadPixel"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"], 'spreadsheet:columnName', 'errorColorBadPixel' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"], 'description', 'The colour to display for a pixel where\na NaN is encountered.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"], 'label', 'Bad Pixel' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"], 'layout:section', 'Diagnostic.Error Handling' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"], 'layout:index', 62 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"]["value"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"]["value"], 'spreadsheet:columnName', 'errorColorBadPixelValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"]["value"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"]["value"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"]["value"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadPixel"]["enabled"], 'spreadsheet:columnName', 'errorColorBadPixelEnabled' )
__children["RenderSettings"]["errorColorBadShader"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"], 'spreadsheet:columnName', 'errorColorBadShader' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"], 'description', 'The colour to display if a problem occurs\nin a shader.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"], 'label', 'Bad Shader' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"], 'layout:section', 'Diagnostic.Error Handling' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"], 'layout:index', 63 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"]["value"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"]["value"], 'spreadsheet:columnName', 'errorColorBadShaderValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"]["value"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"]["value"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"]["value"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["errorColorBadShader"]["enabled"], 'spreadsheet:columnName', 'errorColorBadShaderEnabled' )
__children["RenderSettings"]["logInfo"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"], 'spreadsheet:columnName', 'logInfo' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"], 'description', 'Whether or not information messages are included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"], 'label', 'Info' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"], 'layout:index', 64 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"]["value"], 'spreadsheet:columnName', 'logInfoValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logInfo"]["enabled"], 'spreadsheet:columnName', 'logInfoEnabled' )
__children["RenderSettings"]["logWarnings"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"], 'spreadsheet:columnName', 'logWarnings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"], 'description', 'Whether or not warning messages are included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"], 'label', 'Warnings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"], 'layout:index', 65 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"]["value"], 'spreadsheet:columnName', 'logWarningsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logWarnings"]["enabled"], 'spreadsheet:columnName', 'logWarningsEnabled' )
__children["RenderSettings"]["logErrors"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"], 'spreadsheet:columnName', 'logErrors' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"], 'description', 'Whether or not error messages are included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"], 'label', 'Errors' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"], 'layout:index', 66 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"]["value"], 'spreadsheet:columnName', 'logErrorsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logErrors"]["enabled"], 'spreadsheet:columnName', 'logErrorsEnabled' )
__children["RenderSettings"]["logDebug"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"], 'spreadsheet:columnName', 'logDebug' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"], 'description', 'Whether or not debug messages are included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"], 'label', 'Debug' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"], 'layout:index', 67 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"]["value"], 'spreadsheet:columnName', 'logDebugValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logDebug"]["enabled"], 'spreadsheet:columnName', 'logDebugEnabled' )
__children["RenderSettings"]["logAssParse"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"], 'spreadsheet:columnName', 'logAssParse' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"], 'description', 'Whether or not ass parsing is included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"], 'label', 'AssParse' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"], 'layout:index', 68 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"]["value"], 'spreadsheet:columnName', 'logAssParseValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logAssParse"]["enabled"], 'spreadsheet:columnName', 'logAssParseEnabled' )
__children["RenderSettings"]["logPlugins"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"], 'spreadsheet:columnName', 'logPlugins' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"], 'description', 'Whether or not plugin loading is included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"], 'label', 'Plugins' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"], 'layout:index', 69 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"]["value"], 'spreadsheet:columnName', 'logPluginsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logPlugins"]["enabled"], 'spreadsheet:columnName', 'logPluginsEnabled' )
__children["RenderSettings"]["logProgress"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"], 'spreadsheet:columnName', 'logProgress' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"], 'description', 'Whether or not progress messages are included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"], 'label', 'Progress' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"], 'layout:index', 70 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"]["value"], 'spreadsheet:columnName', 'logProgressValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logProgress"]["enabled"], 'spreadsheet:columnName', 'logProgressEnabled' )
__children["RenderSettings"]["logNAN"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"], 'spreadsheet:columnName', 'logNAN' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"], 'description', 'Whether or not pixels with NaNs are included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"], 'label', 'NAN' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"], 'layout:index', 71 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"]["value"], 'spreadsheet:columnName', 'logNANValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logNAN"]["enabled"], 'spreadsheet:columnName', 'logNANEnabled' )
__children["RenderSettings"]["logTimestamp"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"], 'spreadsheet:columnName', 'logTimestamp' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"], 'description', 'Whether or not timestamp prefixes are included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"], 'label', 'Timestamp' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"], 'layout:index', 72 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"]["value"], 'spreadsheet:columnName', 'logTimestampValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logTimestamp"]["enabled"], 'spreadsheet:columnName', 'logTimestampEnabled' )
__children["RenderSettings"]["logStats"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"], 'spreadsheet:columnName', 'logStats' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"], 'description', 'Whether or not statistics are included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"], 'label', 'Stats' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"], 'layout:index', 73 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"]["value"], 'spreadsheet:columnName', 'logStatsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logStats"]["enabled"], 'spreadsheet:columnName', 'logStatsEnabled' )
__children["RenderSettings"]["logBacktrace"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"], 'spreadsheet:columnName', 'logBacktrace' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"], 'description', 'Whether or not stack backtraces from crashes are included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"], 'label', 'Backtrace' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"], 'layout:index', 74 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"]["value"], 'spreadsheet:columnName', 'logBacktraceValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logBacktrace"]["enabled"], 'spreadsheet:columnName', 'logBacktraceEnabled' )
__children["RenderSettings"]["logMemory"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"], 'spreadsheet:columnName', 'logMemory' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"], 'description', 'Whether or not memory usage prefixes are included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"], 'label', 'Memory' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"], 'layout:index', 75 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"]["value"], 'spreadsheet:columnName', 'logMemoryValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logMemory"]["enabled"], 'spreadsheet:columnName', 'logMemoryEnabled' )
__children["RenderSettings"]["logColor"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"], 'spreadsheet:columnName', 'logColor' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"], 'description', 'Whether or not coloured messages are included in the log output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"], 'label', 'Color' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"], 'layout:section', 'Diagnostic.Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"], 'layout:index', 76 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"]["value"], 'spreadsheet:columnName', 'logColorValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["logColor"]["enabled"], 'spreadsheet:columnName', 'logColorEnabled' )
__children["RenderSettings"]["consoleInfo"]["value"].setValue( True )
__children["RenderSettings"]["consoleInfo"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"], 'spreadsheet:columnName', 'consoleInfo' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"], 'description', 'Whether or not information messages are included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"], 'label', 'Info' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"], 'layout:index', 77 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"]["value"], 'spreadsheet:columnName', 'consoleInfoValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleInfo"]["enabled"], 'spreadsheet:columnName', 'consoleInfoEnabled' )
__children["RenderSettings"]["consoleWarnings"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"], 'spreadsheet:columnName', 'consoleWarnings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"], 'description', 'Whether or not warning messages are included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"], 'label', 'Warnings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"], 'layout:index', 78 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"]["value"], 'spreadsheet:columnName', 'consoleWarningsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleWarnings"]["enabled"], 'spreadsheet:columnName', 'consoleWarningsEnabled' )
__children["RenderSettings"]["consoleErrors"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"], 'spreadsheet:columnName', 'consoleErrors' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"], 'description', 'Whether or not error messages are included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"], 'label', 'Errors' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"], 'layout:index', 79 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"]["value"], 'spreadsheet:columnName', 'consoleErrorsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleErrors"]["enabled"], 'spreadsheet:columnName', 'consoleErrorsEnabled' )
__children["RenderSettings"]["consoleDebug"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"], 'spreadsheet:columnName', 'consoleDebug' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"], 'description', 'Whether or not debug messages are included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"], 'label', 'Debug' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"], 'layout:index', 80 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"]["value"], 'spreadsheet:columnName', 'consoleDebugValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleDebug"]["enabled"], 'spreadsheet:columnName', 'consoleDebugEnabled' )
__children["RenderSettings"]["consoleAssParse"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"], 'spreadsheet:columnName', 'consoleAssParse' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"], 'description', 'Whether or not ass parsing is included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"], 'label', 'AssParse' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"], 'layout:index', 81 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"]["value"], 'spreadsheet:columnName', 'consoleAssParseValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleAssParse"]["enabled"], 'spreadsheet:columnName', 'consoleAssParseEnabled' )
__children["RenderSettings"]["consolePlugins"]["value"].setValue( True )
__children["RenderSettings"]["consolePlugins"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"], 'spreadsheet:columnName', 'consolePlugins' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"], 'description', 'Whether or not plugin loading is included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"], 'label', 'Plugins' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"], 'layout:index', 82 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"]["value"], 'spreadsheet:columnName', 'consolePluginsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consolePlugins"]["enabled"], 'spreadsheet:columnName', 'consolePluginsEnabled' )
__children["RenderSettings"]["consoleProgress"]["value"].setValue( True )
__children["RenderSettings"]["consoleProgress"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"], 'spreadsheet:columnName', 'consoleProgress' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"], 'description', 'Whether or not progress messages are included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"], 'label', 'Progress' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"], 'layout:index', 83 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"]["value"], 'spreadsheet:columnName', 'consoleProgressValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleProgress"]["enabled"], 'spreadsheet:columnName', 'consoleProgressEnabled' )
__children["RenderSettings"]["consoleNAN"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"], 'spreadsheet:columnName', 'consoleNAN' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"], 'description', 'Whether or not pixels with NaNs are included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"], 'label', 'NAN' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"], 'layout:index', 84 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"]["value"], 'spreadsheet:columnName', 'consoleNANValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleNAN"]["enabled"], 'spreadsheet:columnName', 'consoleNANEnabled' )
__children["RenderSettings"]["consoleTimestamp"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"], 'spreadsheet:columnName', 'consoleTimestamp' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"], 'description', 'Whether or not timestamp prefixes are included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"], 'label', 'Timestamp' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"], 'layout:index', 85 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"]["value"], 'spreadsheet:columnName', 'consoleTimestampValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleTimestamp"]["enabled"], 'spreadsheet:columnName', 'consoleTimestampEnabled' )
__children["RenderSettings"]["consoleStats"]["value"].setValue( True )
__children["RenderSettings"]["consoleStats"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"], 'spreadsheet:columnName', 'consoleStats' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"], 'description', 'Whether or not statistics are included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"], 'label', 'Stats' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"], 'layout:index', 86 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"]["value"], 'spreadsheet:columnName', 'consoleStatsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleStats"]["enabled"], 'spreadsheet:columnName', 'consoleStatsEnabled' )
__children["RenderSettings"]["consoleBacktrace"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"], 'spreadsheet:columnName', 'consoleBacktrace' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"], 'description', 'Whether or not stack backtraces from crashes are included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"], 'label', 'Backtrace' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"], 'layout:index', 87 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"]["value"], 'spreadsheet:columnName', 'consoleBacktraceValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleBacktrace"]["enabled"], 'spreadsheet:columnName', 'consoleBacktraceEnabled' )
__children["RenderSettings"]["consoleMemory"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"], 'spreadsheet:columnName', 'consoleMemory' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"], 'description', 'Whether or not memory usage prefixes are included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"], 'label', 'Memory' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"], 'layout:index', 88 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"]["value"], 'spreadsheet:columnName', 'consoleMemoryValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleMemory"]["enabled"], 'spreadsheet:columnName', 'consoleMemoryEnabled' )
__children["RenderSettings"]["consoleColor"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"], 'spreadsheet:columnName', 'consoleColor' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"], 'description', 'Whether or not coloured messages are included in the console output.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"], 'label', 'Color' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"], 'layout:section', 'Diagnostic.Console Verbosity' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"], 'layout:index', 89 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"]["value"], 'spreadsheet:columnName', 'consoleColorValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["consoleColor"]["enabled"], 'spreadsheet:columnName', 'consoleColorEnabled' )
__children["RenderSettings"]["ignoreTextures"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreTextures"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreTextures"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreTextures"], 'spreadsheet:columnName', 'ignoreTextures' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreTextures"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreTextures"], 'description', 'Ignores all file textures, rendering as\nif they were all white.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreTextures"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreTextures"], 'layout:section', 'Diagnostic.Features' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreTextures"], 'layout:index', 90 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreTextures"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreTextures"]["value"], 'spreadsheet:columnName', 'ignoreTexturesValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreTextures"]["enabled"], 'spreadsheet:columnName', 'ignoreTexturesEnabled' )
__children["RenderSettings"]["ignoreShaders"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShaders"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShaders"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShaders"], 'spreadsheet:columnName', 'ignoreShaders' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShaders"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShaders"], 'description', 'Ignores all shaders, rendering as a\nsimple facing ratio shader instead.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShaders"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShaders"], 'layout:section', 'Diagnostic.Features' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShaders"], 'layout:index', 91 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShaders"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShaders"]["value"], 'spreadsheet:columnName', 'ignoreShadersValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShaders"]["enabled"], 'spreadsheet:columnName', 'ignoreShadersEnabled' )
__children["RenderSettings"]["ignoreAtmosphere"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreAtmosphere"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreAtmosphere"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreAtmosphere"], 'spreadsheet:columnName', 'ignoreAtmosphere' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreAtmosphere"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreAtmosphere"], 'description', 'Ignores all atmosphere shaders.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreAtmosphere"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreAtmosphere"], 'layout:section', 'Diagnostic.Features' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreAtmosphere"], 'layout:index', 92 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreAtmosphere"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreAtmosphere"]["value"], 'spreadsheet:columnName', 'ignoreAtmosphereValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreAtmosphere"]["enabled"], 'spreadsheet:columnName', 'ignoreAtmosphereEnabled' )
__children["RenderSettings"]["ignoreLights"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreLights"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreLights"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreLights"], 'spreadsheet:columnName', 'ignoreLights' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreLights"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreLights"], 'description', 'Ignores all lights.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreLights"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreLights"], 'layout:section', 'Diagnostic.Features' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreLights"], 'layout:index', 93 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreLights"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreLights"]["value"], 'spreadsheet:columnName', 'ignoreLightsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreLights"]["enabled"], 'spreadsheet:columnName', 'ignoreLightsEnabled' )
__children["RenderSettings"]["ignoreShadows"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShadows"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShadows"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShadows"], 'spreadsheet:columnName', 'ignoreShadows' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShadows"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShadows"], 'description', 'Skips all shadow calculations.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShadows"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShadows"], 'layout:section', 'Diagnostic.Features' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShadows"], 'layout:index', 94 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShadows"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShadows"]["value"], 'spreadsheet:columnName', 'ignoreShadowsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreShadows"]["enabled"], 'spreadsheet:columnName', 'ignoreShadowsEnabled' )
__children["RenderSettings"]["ignoreSubdivision"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSubdivision"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSubdivision"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSubdivision"], 'spreadsheet:columnName', 'ignoreSubdivision' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSubdivision"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSubdivision"], 'description', 'Treats all subdivision surfaces\nas simple polygon meshes instead.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSubdivision"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSubdivision"], 'layout:section', 'Diagnostic.Features' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSubdivision"], 'layout:index', 95 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSubdivision"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSubdivision"]["value"], 'spreadsheet:columnName', 'ignoreSubdivisionValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSubdivision"]["enabled"], 'spreadsheet:columnName', 'ignoreSubdivisionEnabled' )
__children["RenderSettings"]["ignoreDisplacement"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreDisplacement"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreDisplacement"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreDisplacement"], 'spreadsheet:columnName', 'ignoreDisplacement' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreDisplacement"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreDisplacement"], 'description', 'Ignores all displacement shaders.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreDisplacement"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreDisplacement"], 'layout:section', 'Diagnostic.Features' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreDisplacement"], 'layout:index', 96 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreDisplacement"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreDisplacement"]["value"], 'spreadsheet:columnName', 'ignoreDisplacementValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreDisplacement"]["enabled"], 'spreadsheet:columnName', 'ignoreDisplacementEnabled' )
__children["RenderSettings"]["ignoreBump"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreBump"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreBump"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreBump"], 'spreadsheet:columnName', 'ignoreBump' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreBump"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreBump"], 'description', 'Ignores all bump mapping.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreBump"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreBump"], 'layout:section', 'Diagnostic.Features' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreBump"], 'layout:index', 97 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreBump"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreBump"]["value"], 'spreadsheet:columnName', 'ignoreBumpValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreBump"]["enabled"], 'spreadsheet:columnName', 'ignoreBumpEnabled' )
__children["RenderSettings"]["ignoreSSS"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSSS"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSSS"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSSS"], 'spreadsheet:columnName', 'ignoreSSS' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSSS"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSSS"], 'description', 'Disables all subsurface scattering.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSSS"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSSS"], 'layout:section', 'Diagnostic.Features' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSSS"], 'layout:index', 98 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSSS"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSSS"]["value"], 'spreadsheet:columnName', 'ignoreSSSValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreSSS"]["enabled"], 'spreadsheet:columnName', 'ignoreSSSEnabled' )
__children["RenderSettings"]["ignoreImagers"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreImagers"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreImagers"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreImagers"], 'spreadsheet:columnName', 'ignoreImagers' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreImagers"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreImagers"], 'description', 'Disables all imagers.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreImagers"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreImagers"], 'layout:section', 'Diagnostic.Features' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreImagers"], 'layout:index', 99 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreImagers"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreImagers"]["value"], 'spreadsheet:columnName', 'ignoreImagersValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["ignoreImagers"]["enabled"], 'spreadsheet:columnName', 'ignoreImagersEnabled' )
__children["RenderSettings"]["mBlur_enable"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["mBlur_enable"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["mBlur_enable"], 'layout:section', 'Arnold.Motion Blur' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["mBlur_enable"], 'label', 'Enable' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["mBlur_enable"], 'layout:index', 27 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["mBlur_enable"], 'description', 'Enables motion blur.' )
__children["RenderSettings"]["shutter"]["value"].setValue( imath.V2f( -0.5, 0.5 ) )
__children["RenderSettings"]["shutter"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"], 'spreadsheet:columnName', 'shutter' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"], 'description', 'The interval over which the camera shutter is open. Measured\nin frames, and specified relative to the frame being rendered.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"], 'layout:section', 'Arnold.Motion Blur' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"], 'layout:index', 33 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"]["value"], 'spreadsheet:columnName', 'shutterValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"]["value"]["x"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"]["value"]["y"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["shutter"]["enabled"], 'spreadsheet:columnName', 'shutterEnabled' )
__children["RenderSettings"]["transformBlurSegments_value"].setValue( 3 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlurSegments_value"], 'spreadsheet:columnName', 'transformBlurSegmentsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlurSegments_value"], 'layout:section', 'Arnold.Motion Blur' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlurSegments_value"], 'layout:index', 31 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlurSegments_value"], 'label', 'Camera Motion Keys' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlurSegments_value"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlurSegments_value"], 'description', 'The number of sub-steps used for motion blur can be set in the keys attribute within the Motion Blur settings. For situations where there is a direct movement, such as translation and rotation with constant speed, two keys are enough. However, if the object moves erratically during the exposure interval or performs any other kind of non-linear movement, you will need to increase the number of keys.\n\nIncreasing the number of keys does not usually have much effect on rendering times, although it requires more memory to store the additional geometry at multiple times, especially for large polygon meshes.' )
__children["RenderSettings"]["deformationBlurSegments_value"].setValue( 3 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlurSegments_value"], 'spreadsheet:columnName', 'deformationBlurSegmentsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlurSegments_value"], 'layout:section', 'Arnold.Motion Blur' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlurSegments_value"], 'layout:index', 32 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlurSegments_value"], 'label', 'Deformation Motion Keys' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlurSegments_value"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlurSegments_value"], 'description', 'The number of sub-steps used for motion blur can be set in the keys attribute within the Motion Blur settings. For situations where there is a direct movement, such as translation and rotation with constant speed, two keys are enough. However, if the object moves erratically during the exposure interval or performs any other kind of non-linear movement, you will need to increase the number of keys.\n\nIncreasing the number of keys does not usually have much effect on rendering times, although it requires more memory to store the additional geometry at multiple times, especially for large polygon meshes.' )
__children["RenderSettings"]["linkedLights"]["value"].setValue( '*' )
__children["RenderSettings"]["linkedLights"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"], 'spreadsheet:columnName', 'linkedLights' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"], 'description', 'The lights to be linked to this object. Accepts a set expression or\na space separated list of lights. Use "defaultLights" to refer to\nall lights that contribute to illumination by default.\n\nExamples\n--------\n\nAll the default lights plus the lights in the `characterLights` set\n:\n\n`defaultLights | characterLights`\n\nAll the default lights, but without the lights in the `interiorLights`\nset :\n\n`defaultLights - interiorLights`\n\n> Info : Lights can be added to sets either by using the `sets` plug\n> on the light node itself, or by using a separate Set node.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"], 'label', 'Linked Lights' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"], 'layout:section', 'Arnold.Lights' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"], 'layout:index', 35 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"]["value"], 'ui:scene:acceptsSetExpression', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"]["value"], 'spreadsheet:columnName', 'linkedLightsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["linkedLights"]["enabled"], 'spreadsheet:columnName', 'linkedLightsEnabled' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"], 'spreadsheet:columnName', 'filteredLights' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"], 'description', 'The lights to be filtered by this light filter. Accepts a\nset expression or a space separated list of lights.\nUse "defaultLights" to refer to all lights that\ncontribute to illumination by default.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"], 'label', 'Filtered Lights' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"], 'layout:section', 'Arnold.Lights' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"], 'layout:index', 36 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"]["value"], 'ui:scene:acceptsSetExpression', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"]["value"], 'spreadsheet:columnName', 'filteredLightsValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["filteredLights"]["enabled"], 'spreadsheet:columnName', 'filteredLightsEnabled' )
__children["RenderSettings"]["automaticInstancing"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"], 'spreadsheet:columnName', 'automaticInstancing' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"], 'description', 'By default, if Gaffer sees two objects are identical, it will pass them\nto the renderer only once, saving a lot of memory. You can set this to\nfalse to disable that, losing the memory savings. This can be useful\nin certain cases like using world space displacement and wanting multiple\ncopies to displace differently. Disabling is currently only supported by\nthe Arnold render backend.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"], 'layout:section', 'System.Render Settings' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"], 'layout:index', 50 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"], 'label', 'Automatic Instancing' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"]["value"], 'spreadsheet:columnName', 'automaticInstancingValue' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["automaticInstancing"]["enabled"], 'spreadsheet:columnName', 'automaticInstancingEnabled' )
__children["RenderSettings"]["Enable_ocio"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["Enable_ocio"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["Enable_ocio"], 'layout:section', 'Common.Color Management' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["Enable_ocio"], 'layout:index', 9 )
__children["RenderSettings"]["transformBlur_enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlur_enabled"], 'spreadsheet:columnName', 'transformBlurEnabled' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlur_enabled"], 'layout:section', 'Arnold.Motion Blur' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlur_enabled"], 'layout:index', 30 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlur_enabled"], 'label', 'Camera' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlur_enabled"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["transformBlur_enabled"], 'description', 'Switch for enabling or disabling camera motion blur.' )
__children["RenderSettings"]["deformationBlur_enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlur_enabled"], 'spreadsheet:columnName', 'deformationBlurEnabled' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlur_enabled"], 'layout:section', 'Arnold.Motion Blur' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlur_enabled"], 'layout:index', 29 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlur_enabled"], 'label', 'Deformation' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlur_enabled"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["deformationBlur_enabled"], 'description', 'This option specifies whether motion blur will take into account geometry deformation. This should only be enabled when objects in the scene change shape quickly enough since this option uses more memory and renders slower. ' )
__children["RenderSettings"]["aaSamples"].setValue( 4 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamples"], 'layout:section', 'Arnold.Sampling And Res' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamples"], 'layout:index', 11 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamples"], 'description', 'Controls the number of rays per pixel\ntraced from the camera. The more samples,\nthe better the quality of antialiasing,\nmotion blur and depth of field. The actual\nnumber of rays per pixel is the square of\nthe AA samples value - so a value of 3\nmeans 9 rays are traced, 4 means 16 rays are\ntraced and so on.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamples"], 'label', 'AA Samples' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["aaSamples"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseSamples"], 'description', 'Controls the number of rays traced when\ncomputing indirect illumination ("bounce light").\nThe number of actual diffuse rays traced is the\nsquare of this number.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseSamples"], 'label', 'Diffuse Samples' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseSamples"], 'layout:section', 'Arnold.Sampling And Res' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseSamples"], 'layout:index', 12 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giDiffuseSamples"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularSamples"], 'description', 'Controls the number of rays traced when\ncomputing specular reflections.\nThe number of actual specular rays traced\nis the square of this number.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularSamples"], 'label', 'Specular Samples' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularSamples"], 'layout:section', 'Arnold.Sampling And Res' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularSamples"], 'layout:index', 13 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSpecularSamples"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionSamples"], 'description', 'Controls the number of rays traced when\ncomputing specular refractions. The number of actual\ntransmitted specular rays traced is the square of this number.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionSamples"], 'label', 'Transmission Samples' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionSamples"], 'layout:section', 'Arnold.Sampling And Res' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionSamples"], 'layout:index', 14 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giTransmissionSamples"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSSSSamples"], 'description', 'Controls the number of rays traced when\ncomputing subsurface scattering. The number of actual\nsubsurface rays traced is the square of this number.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSSSSamples"], 'label', 'SSS Samples' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSSSSamples"], 'layout:section', 'Arnold.Sampling And Res' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSSSSamples"], 'layout:index', 15 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giSSSSamples"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeSamples"], 'description', 'Controls the number of rays traced when\ncomputing indirect lighting for volumes.\nThe number of actual rays traced\nis the square of this number. The volume\nray depth must be increased from the default\nvalue of 0 before this setting is of use.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeSamples"], 'label', 'Volume Samples' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeSamples"], 'layout:section', 'Arnold.Sampling And Res' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeSamples"], 'layout:index', 16 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["giVolumeSamples"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lightSamples"], 'label', 'Light Samples' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lightSamples"], 'layout:section', 'Arnold.Sampling And Res' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lightSamples"], 'layout:index', 17 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["lightSamples"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["resolutionMultiplier"], 'description', 'Multiplies the resolution of the render by this amount.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["resolutionMultiplier"], 'layout:section', 'Arnold.Sampling And Res' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["resolutionMultiplier"], 'layout:index', 18 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["resolutionMultiplier"], 'nodule:type', '' )
__children["RenderSettings"]["Expression1"]["__in"]["p0"].setInput( __children["RenderSettings"]["StandardOptions"]["user"]["instantaneous_shutter"] )
__children["RenderSettings"]["Expression1"]["__uiPosition"].setValue( imath.V2f( 5.94756222, 17.6164055 ) )
__children["RenderSettings"]["user_instantaneous_shutter"].setValue( True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["user_instantaneous_shutter"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["user_instantaneous_shutter"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["user_instantaneous_shutter"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["user_instantaneous_shutter"], 'layout:section', 'Arnold.Motion Blur' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["user_instantaneous_shutter"], 'layout:index', 28 )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["user_instantaneous_shutter"], 'label', 'Instantaneous Shutter' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["user_instantaneous_shutter"], 'description', 'Sets an instantaneous shutter for the camera, so that the beauty and other AOVs are not motion blurred, but you still get motion vectors for the motion_vector shader or the motion_vector AOV.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["crop_fixer"], 'annotation:user:text', 'When you have both overscan and are cropping Gaffer does not by default include the overscan if the crop area is along the bounds of the image. This is an expression to help Gaffer pass on to Arnold to use oversecan if the crop window is along the image bounds.' )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["crop_fixer"], 'annotation:user:color', imath.Color3f( 0.150000006, 0.25999999, 0.25999999 ) )
__children["RenderSettings"]["crop_fixer"]["in"].setInput( __children["RenderSettings"]["ColorManagerOcio"]["out"] )
__children["RenderSettings"]["crop_fixer"]["tweaks"]["tweak0"]["name"].setValue( 'render:cropWindow' )
__children["RenderSettings"]["crop_fixer"]["tweaks"]["tweak0"]["enabled"].setInput( __children["RenderSettings"]["crop_fixer_expression"]["__out"]["p0"] )
__children["RenderSettings"]["crop_fixer"]["tweaks"]["tweak0"]["value"]["min"]["x"].setInput( __children["RenderSettings"]["crop_fixer_expression"]["__out"]["p3"] )
__children["RenderSettings"]["crop_fixer"]["tweaks"]["tweak0"]["value"]["min"]["y"].setInput( __children["RenderSettings"]["crop_fixer_expression"]["__out"]["p4"] )
__children["RenderSettings"]["crop_fixer"]["tweaks"]["tweak0"]["value"]["max"]["x"].setInput( __children["RenderSettings"]["crop_fixer_expression"]["__out"]["p1"] )
__children["RenderSettings"]["crop_fixer"]["tweaks"]["tweak0"]["value"]["max"]["y"].setInput( __children["RenderSettings"]["crop_fixer_expression"]["__out"]["p2"] )
__children["RenderSettings"]["crop_fixer"]["__uiPosition"].setValue( imath.V2f( -6.82941723, -15.7788353 ) )
Gaffer.Metadata.registerValue( __children["RenderSettings"]["crop_fixer_expression"], 'nodeGadget:type', 'GafferUI::StandardNodeGadget' )
__children["RenderSettings"]["crop_fixer_expression"]["__in"]["p0"].setInput( __children["RenderSettings"]["options_overscan"]["value"] )
__children["RenderSettings"]["crop_fixer_expression"]["__in"]["p1"].setInput( __children["RenderSettings"]["options_overscanBottom"]["value"] )
__children["RenderSettings"]["crop_fixer_expression"]["__in"]["p2"].setInput( __children["RenderSettings"]["options_overscanLeft"]["value"] )
__children["RenderSettings"]["crop_fixer_expression"]["__in"]["p3"].setInput( __children["RenderSettings"]["options_overscanRight"]["value"] )
__children["RenderSettings"]["crop_fixer_expression"]["__in"]["p4"].setInput( __children["RenderSettings"]["options_overscanTop"]["value"] )
__children["RenderSettings"]["crop_fixer_expression"]["__in"]["p5"].setInput( __children["RenderSettings"]["options_renderCropWindow"]["enabled"] )
__children["RenderSettings"]["crop_fixer_expression"]["__in"]["p6"].setInput( __children["RenderSettings"]["options_renderCropWindow"]["value"]["max"]["x"] )
__children["RenderSettings"]["crop_fixer_expression"]["__in"]["p7"].setInput( __children["RenderSettings"]["options_renderCropWindow"]["value"]["max"]["y"] )
__children["RenderSettings"]["crop_fixer_expression"]["__in"]["p8"].setInput( __children["RenderSettings"]["options_renderCropWindow"]["value"]["min"]["x"] )
__children["RenderSettings"]["crop_fixer_expression"]["__in"]["p9"].setInput( __children["RenderSettings"]["options_renderCropWindow"]["value"]["min"]["y"] )
__children["RenderSettings"]["crop_fixer_expression"]["__uiPosition"].setValue( imath.V2f( -30.2535534, -16.5101852 ) )
__children["RenderSettings"]["Expression1"]["__engine"].setValue( 'python' )
__children["RenderSettings"]["Expression1"]["__expression"].setValue( 'if parent["__in"]["p0"] == False:\n\n\tparent["__out"]["p0"] = True\n\t\nif parent["__in"]["p0"] == True:\n\n\tparent["__out"]["p0"] = False\n\t' )
__children["RenderSettings"]["crop_fixer_expression"]["__engine"].setValue( 'python' )
__children["RenderSettings"]["crop_fixer_expression"]["__expression"].setValue( 'crop = {}\ncrop["min_x"] = parent["__in"]["p8"]\ncrop["max_x"] = parent["__in"]["p6"]\ncrop["min_y"] = parent["__in"]["p9"]\ncrop["max_y"] = parent["__in"]["p7"]\n\noverscan_enabled = parent["__in"]["p0"]\ncrop_enabled = parent["__in"]["p5"]\n\nif overscan_enabled and crop_enabled:\n    overscan = {}\n    overscan["min_x"] = parent["__in"]["p2"]\n    overscan["max_x"] = parent["__in"]["p3"]\n    overscan["min_y"] = parent["__in"]["p4"]\n    overscan["max_y"] = parent["__in"]["p1"]\n    \n    for k, v in crop.items():\n        if v == 1:\n           crop[k] = v + overscan[k]\n        elif v == 0:\n           crop[k] = v - overscan[k] \n\nparent["__out"]["p0"] = crop_enabled\n    \n\n\nparent["__out"]["p3"] = crop["min_x"]\nparent["__out"]["p1"] = crop["max_x"]\nparent["__out"]["p4"] = crop["min_y"]\nparent["__out"]["p2"] = crop["max_y"]\n' )

__children["RenderSettings"].post_creation()
del __children


